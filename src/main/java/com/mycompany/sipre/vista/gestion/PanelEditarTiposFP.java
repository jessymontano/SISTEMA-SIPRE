package com.mycompany.sipre.vista.gestion;

import com.mycompany.sipre.controlador.TipoController;
import com.mycompany.sipre.modelo.TipoFormatoPreimpreso;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.List;

public class PanelEditarTiposFP extends javax.swing.JPanel {
    private List<TipoFormatoPreimpreso> tipos;

    /**
     * Creates new form PanelGestionRol
     */
    public PanelEditarTiposFP() {
        initComponents();
        this.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentShown(ComponentEvent e) {
                actualizarTabla(); // Refrescar datos al mostrarse
            }
        });
        btnGuardar.addActionListener(evt -> btnGuardarActionPerformed(evt));
    }

    //llenar tabla automaticamente
    private void actualizarTabla() {
        TipoController controller = new TipoController();
        controller.obtenerTipos(tipoActualizados -> {
            
            tipoActualizados.sort((d1, d2) -> Integer.compare(d1.getIdTipo(), d2.getIdTipo()));
            this.tipos = tipoActualizados;

            SwingUtilities.invokeLater(() -> {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0); // Limpiar tabla

                for (TipoFormatoPreimpreso tipo : tipoActualizados) {
                    System.out.println(tipo.getIdTipo());
                    model.addRow(new Object[]{
                            tipo.getIdTipo(),
                            tipo.getNombre(),
                            "Modificar",
                    });
                }
                jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
            });
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jDialog1 = new javax.swing.JDialog();
        btnGuardar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        fieldNombre = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();


        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog1.setTitle("Modificar tipo");
        jDialog1.setAlwaysOnTop(true);
        jDialog1.setBackground(null);
        jDialog1.setMaximumSize(new java.awt.Dimension(500, 300));
        jDialog1.setModal(true);
        jDialog1.setPreferredSize(new java.awt.Dimension(500, 300));
        jDialog1.pack();
        jDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());


        jLabel3.setText("Nombre: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 72, 0, 0);
        jDialog1.getContentPane().add(jLabel3, gridBagConstraints);

        fieldNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldNombreActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 152;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(60, 18, 0, 132);
        jDialog1.getContentPane().add(fieldNombre, gridBagConstraints);


        btnGuardar.setBackground(new java.awt.Color(99, 132, 182));
        btnGuardar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardar.setText("Guardar");


        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 18, 20, 0);
        jDialog1.getContentPane().add(btnGuardar, gridBagConstraints);

        jLabel3.setText("Nombre: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 72, 0, 0);
        jDialog1.getContentPane().add(jLabel3, gridBagConstraints);

        fieldNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldNombreActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 152;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(31, 18, 0, 132);
        jDialog1.getContentPane().add(fieldNombre, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 76;
        gridBagConstraints.anchor = GridBagConstraints.CENTER;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);

        setBackground(new java.awt.Color(204, 204, 204));
        setLayout(new java.awt.GridBagLayout());


        fieldNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldNombreActionPerformed(evt);
            }
        });


        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{"ID", "Nombre", "Modificar"}  // Agregar "ID" como primera columna
        ) {
            Class[] types = new Class[]{Integer.class, String.class, Object.class};  // Definir el tipo para la columna ID
            boolean[] canEdit = new boolean[]{false, false, true};

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

        jTable1.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer("Modificar"));
        jTable1.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor(new JCheckBox(), "Modificar"));
        jTable1.setRowHeight(30);
        jTable1.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                setBackground(new Color(77, 77, 77));
                setForeground(Color.WHITE);
                setFont(new Font("Segoe UI", Font.BOLD, 12));
                return this;
            }
        });

        jScrollPane1.setViewportView(jTable1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.CENTER;
        gridBagConstraints.ipadx = 500;
        gridBagConstraints.ipady = 300;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 0);
        add(jScrollPane1, gridBagConstraints);


        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 0);

    }// </editor-fold>//GEN-END:initComponents

    private TipoFormatoPreimpreso tipoSeleccionado;

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {
        String nuevoNombre = fieldNombre.getText().trim();

        if (nuevoNombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El nombre no puede estar vac√≠o.");
            return;
        }

        if (tipoSeleccionado != null) {
            tipoSeleccionado.setNombre(nuevoNombre);
            TipoController controller = new TipoController();

            System.out.println("ID antes de actualizar: " + tipoSeleccionado.getIdTipo());  // Depuraci√≥n

            controller.actualizarTipo(tipoSeleccionado.getIdTipo(), tipoSeleccionado, exito -> {
                SwingUtilities.invokeLater(() -> {
                    if (exito) {
                        JOptionPane.showMessageDialog(this, "Tipo actualizado correctamente.");
                        jDialog1.setVisible(false);
                        actualizarTabla(); // Actualizar la tabla despu√©s del cambio
                    } else {
                        JOptionPane.showMessageDialog(this, "Error al actualizar el tipo.");
                    }
                });
            });
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un tipo para modificar.");
        }
    }

    private void fieldNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldNombreActionPerformed


    // clase para mostrar botones en la tabla
    class ButtonRenderer extends JButton implements TableCellRenderer {

        private String actionType;

        public ButtonRenderer(String actionType) {
            this.actionType = actionType;
            setContentAreaFilled(false);
            setBorderPainted(false);
            setFocusPainted(false);
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setBackground(table.getSelectionBackground());
            } else {
                setBackground(new java.awt.Color(99, 132, 182));
            }

            if ("Modificar".equals(actionType)) {
                ImageIcon icono = new ImageIcon(getClass().getResource("/edit.png"));
                Image image = icono.getImage();
                Image nuevaImagen = image.getScaledInstance(20, 20, Image.SCALE_SMOOTH);
                icono = new ImageIcon(nuevaImagen);
                setIcon(icono);
            }
            return this;
        }
    }

    class ButtonEditor extends DefaultCellEditor {

        private JButton button;
        private boolean isPushed;
        private int selectedRow;
        private String actionType;

        public ButtonEditor(JCheckBox checkBox, String actionType) {
            super(checkBox);
            this.actionType = actionType;
            button = new JButton();
            button.setContentAreaFilled(false);
            button.setBorderPainted(false);
            button.setFocusPainted(false);
            button.setOpaque(true);

            if ("Modificar".equals(actionType)) {
                ImageIcon icono = new ImageIcon(getClass().getResource("/edit.png"));
                Image image = icono.getImage();
                Image nuevaImagen = image.getScaledInstance(20, 20, Image.SCALE_SMOOTH);
                icono = new ImageIcon(nuevaImagen);
                button.setIcon(icono);
            }

            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int tipoId = (int) jTable1.getValueAt(selectedRow, 0);  // Obtener ID desde la fila seleccionada
                    abrirFormulario(tipoId);  // Llamamos a abrirFormulario con el ID
                    fireEditingStopped();
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            selectedRow = row;  // Asignar la fila seleccionada
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            return actionType;
        }


        @Override
        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        @Override
        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }

    private void abrirFormulario(int tipoId) {
        tipoSeleccionado = tipos.stream().filter(tipo -> tipo.getIdTipo() == tipoId).findFirst().orElse(null);

        System.out.println("ID del tipo seleccionado: " + tipoSeleccionado.getIdTipo());  //

        fieldNombre.setText(tipoSeleccionado.getNombre());
        fieldNombre.setEnabled(true);

        jDialog1.setTitle("Modificar Tipo: " + tipoSeleccionado.getNombre());
        jDialog1.setSize(500, 300);
        jDialog1.setLocationRelativeTo(this);

        jDialog1.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables

    private javax.swing.JButton btnGuardar;
    private javax.swing.JTextField fieldNombre;
    private javax.swing.JDialog jDialog1;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;

    // End of variables declaration//GEN-END:variables
}
